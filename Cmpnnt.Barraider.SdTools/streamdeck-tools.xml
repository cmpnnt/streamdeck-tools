<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StreamDeckTools</name>
    </assembly>
    <members>
        <member name="T:BarRaider.SdTools.Attributes.FilenamePropertyAttribute">
            <summary>
            FilenamePropertyAttribute - Used to indicate the current property holds a file name. 
            This will allow StreamDeck Utilities to strip the mandatory "C:\fakepath\" added by the SDK
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Attributes.PluginActionIdAttribute">
            <summary>
            PluginActionId attribute
            Used to indicate the UUID in the manifest file that matches to this class
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Attributes.PluginActionIdAttribute.ActionId">
            <summary>
            UUID of the action
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Attributes.PluginActionIdAttribute.#ctor(System.String)">
            <summary>
            Constructor - This attribute is used to indicate the UUID in the manifest file that matches to this class
            </summary>
            <param name="actionId"></param>
        </member>
        <member name="T:BarRaider.SdTools.Backend.EncoderBase">
            <summary>
            Main abstract class your plugin should derive from for dials (not keys)
            For keys use the KeyBase or KeyAndEncoderBase
            Holds implementation for all the basic functions
            If you're missing an event, you can register to it from the Connection.StreamDeckConnection object
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.DialRotate(BarRaider.SdTools.Payloads.DialRotatePayload)">
            <summary>
            Called when the dial is rotated
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.DialDown(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.DialUp(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is released
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.TouchPress(BarRaider.SdTools.Payloads.TouchpadPressPayload)">
            <summary>
            Called when the touchpad (above the dials) is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.ReceivedSettings(BarRaider.SdTools.Payloads.ReceivedSettingsPayload)">
            <summary>
            Called when the PropertyInspector has new settings
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.ReceivedGlobalSettings(BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload)">
            <summary>
            Called when GetGlobalSettings is called.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.OnTick">
            <summary>
            Called every second
            Logic for displaying title/image can go here
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.Dispose">
            <summary>
            Abstract method Called when the plugin is disposed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.Destroy">
            <summary>
            Main iDisposable Dispose function
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.EncoderBase.Connection">
            <summary>
            Connection object which handles your communication with the Stream Deck app
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.EncoderBase.#ctor(BarRaider.SdTools.Backend.ISdConnection,BarRaider.SdTools.Payloads.InitialPayload)">
            <summary>
            Constructor for PluginBase. Receives the communication and plugin settings 
            Note that the settings object is not used by the base and should be consumed by the deriving class.
            Usually, a private class inside the deriving class is created which stores the settings
            Example for settings usage:
            * if (payload.Settings == null || payload.Settings.Count == 0)
            * {
            *         // CreateAction default settings
            * }
            * else
            * {
                this.settings = payload.Settings.ToObject();
            * }
            
            </summary>
            <param name="connection">Communication module with Stream Deck</param>
            <param name="payload">Plugin settings - NOTE: Not used in base class, should be consumed by deriving class</param>
        </member>
        <member name="T:BarRaider.SdTools.Backend.ICommonPluginFunctions">
            <summary>
            Common functions used by both keypad and dial plugins
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ICommonPluginFunctions.ReceivedSettings(BarRaider.SdTools.Payloads.ReceivedSettingsPayload)">
            <summary>
            Called when the PropertyInspector has new settings
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ICommonPluginFunctions.ReceivedGlobalSettings(BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload)">
            <summary>
            Called when GetGlobalSettings is called.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ICommonPluginFunctions.OnTick">
            <summary>
            Called every second
            Logic for displaying title/image can go here
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ICommonPluginFunctions.Destroy">
            <summary>
            Internal function used by StreamDeckTools to prevent memory leaks
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Backend.IEncoderPlugin">
            <summary>
            Interface used to capture dial/encoder events
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IEncoderPlugin.DialRotate(BarRaider.SdTools.Payloads.DialRotatePayload)">
            <summary>
            Called when the dial is rotated
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IEncoderPlugin.DialDown(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IEncoderPlugin.DialUp(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is released
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IEncoderPlugin.TouchPress(BarRaider.SdTools.Payloads.TouchpadPressPayload)">
            <summary>
            Called when the touchpad (above the dials) is pressed
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Backend.IKeypadPlugin">
            <summary>
            Interface used to capture key events
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IKeypadPlugin.KeyPressed(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IKeypadPlugin.KeyReleased(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is released
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Backend.IPluginActionRegistry">
            <summary>
            This class is intended to be implemented by a class generated in Cmpnnt.ActionRegistryGenerator
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IPluginActionRegistry.PluginActionIDs">
            <summary>
            An immutable set with the PluginAction UUIDs are found in both the plugin's manifest
            and in the attribute that decorates each action of your plugin. 
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.IPluginActionRegistry.CreateAction(System.String,BarRaider.SdTools.Backend.ISdConnection,BarRaider.SdTools.Payloads.InitialPayload)">
            <summary>
            Contains a source-generated factory for each action supported by this plugin.
            </summary>
            <param name="actionId">The UUID of the PluginAction of which to create a new instance</param>
            <param name="connection">Contains the information necessary to connect to the Stream Deck</param>
            <param name="payload">The initial payload received during the plugin's construction. Contains basic
            information about the plugin.</param>
            <returns>An instance of the PluginAction that corresponds to the given <paramref name="actionId"/></returns>
        </member>
        <member name="T:BarRaider.SdTools.Backend.ISdConnection">
            <summary>
            Interface for a Stream Deck connection
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnSendToPlugin">
            <summary>
            Event received by the plugin when the Property Inspector uses the sendToPlugin event.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnTitleParametersDidChange">
            <summary>
            Event received when the user changes the title or title parameters.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnApplicationDidTerminate">
            <summary>
            Event received when a monitored application is terminated
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnApplicationDidLaunch">
            <summary>
            Event received when a monitored application is launched
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnDeviceDidDisconnect">
            <summary>
            Event received when a device is unplugged from the computer
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnDeviceDidConnect">
            <summary>
            Event received when a device is plugged to the computer.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnPropertyInspectorDidAppear">
            <summary>
            Event received when the Property Inspector appears in the Stream Deck software user interface, for example when selecting a new instance.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnPropertyInspectorDidDisappear">
            <summary>
            Event received when the Property Inspector for an instance is removed from the Stream Deck software user interface, for example when selecting a different instance.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.ISdConnection.OnSystemDidWakeUp">
            <summary>
            Event received when the computer wakes up
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SendToPropertyInspectorAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send settings to the PropertyInspector
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetSettingsAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Persists your plugin settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetGlobalSettingsAsync(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Persists your global plugin settings
            </summary>
            <param name="settings">Settings to save globally</param>
            <param name="triggerDidReceiveGlobalSettings">Boolean whether to also trigger a didReceiveGlobalSettings event. Default is true</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.GetGlobalSettingsAsync">
            <summary>
            Persists your global plugin settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetImageAsync(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets an image on the StreamDeck key.
            </summary>
            <param name="base64Image">Base64 encoded image</param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <param name="forceSendToStreamdeck">Should image be sent even if it is identical to the one sent previously. Default is false</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetImageAsync(SkiaSharp.SKData,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets an image on the StreamDeck key
            </summary>
            <param name="data">An SKData object representing the encoded image</param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <param name="forceSendToStreamdeck">Should image be sent even if it is identical to the one sent previously. Default is false</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetDefaultImageAsync">
            <summary>
            Sets the default image for this state, as configured in the manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetTitleAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Sets a title on the StreamDeck key
            </summary>
            <param name="title"></param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SwitchProfileAsync(System.String)">
            <summary>
            Switches to one of the plugin's built-in profiles
            </summary>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SwitchProfileAsync(System.String,System.String)">
            <summary>
            Switches to one of the plugin's built-in profiles. Allows to choose which device to switch it on.
            </summary>
            <param name="profileName"></param>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.ShowAlert">
            <summary>
            Shows the Alert (Yellow Triangle) on the StreamDeck key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.ShowOk">
            <summary>
            Shows the Success (Green checkmark) on the StreamDeck key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.LogSdMessage(System.String)">
            <summary>
            Add a message to the Stream Deck log. This is the log located at: %appdata%\Elgato\StreamDeck\logs\StreamDeck0.log
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.DeviceInfo">
            <summary>
            Gets the Stream Deck device's info
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.GetSettingsAsync">
            <summary>
            Tells Stream Deck to return the current plugin settings via the ReceivedSettings function
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.OpenUrlAsync(System.String)">
            <summary>
            Opens a URI in the user's browser
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.OpenUrlAsync(System.Uri)">
            <summary>
            Opens a URI in the user's browser
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetStateAsync(System.Nullable{System.UInt32})">
            <summary>
            Sets the plugin to a specific state which is pre-configured in the manifest file
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetFeedbackAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the values of touchpad layouts items
            </summary>
            <param name="dictKeyValue">Dictionary holding the layout item keys and values you want to change</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetFeedbackAsync(System.String,System.String)">
            <summary>
            Sets the value of a single touchpad layout item
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetFeedbackAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Sets the values of touchpad layouts items using a preset JObject
            </summary>
            <param name="feedbackPayload"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.ISdConnection.SetFeedbackLayoutAsync(System.String)">
            <summary>
            Changes the current Stream Deck+ touch display layout
            </summary>
            <returns></returns>
        </member>
        <member name="P:BarRaider.SdTools.Backend.ISdConnection.ContextId">
            <summary>
            An opaque value identifying the plugin. This value is received during the Registration procedure
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.ISdConnection.DeviceId">
            <summary>
            An opaque value identifying the device the plugin is launched on.
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.ISdConnection.StreamDeckConnection">
            <summary>
            StreamDeckConnection object, initialized based on the args received when launching the program
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Backend.KeyAndEncoderBase">
            <summary>
            Main abstract class your plugin should derive from for keys (not dials)
            For dials use the EncoderBase or KeyAndEncoderBase
            Holds implementation for all the basic functions
            If you're missing an event, you can register to it from the Connection.StreamDeckConnection object
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.DialRotate(BarRaider.SdTools.Payloads.DialRotatePayload)">
            <summary>
            Called when the dial is rotated
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.DialDown(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.DialUp(BarRaider.SdTools.Payloads.DialPayload)">
            <summary>
            Called when the Dial is released
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.TouchPress(BarRaider.SdTools.Payloads.TouchpadPressPayload)">
            <summary>
            Called when the touchpad (above the dials) is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.KeyPressed(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.KeyReleased(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is released
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.ReceivedSettings(BarRaider.SdTools.Payloads.ReceivedSettingsPayload)">
            <summary>
            Called when the PropertyInspector has new settings
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.ReceivedGlobalSettings(BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload)">
            <summary>
            Called when GetGlobalSettings is called.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.OnTick">
            <summary>
            Called every second
            Logic for displaying title/image can go here
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.Dispose">
            <summary>
            Abstract method Called when the plugin is disposed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.Destroy">
            <summary>
            Main iDisposable Dispose function
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.KeyAndEncoderBase.Connection">
            <summary>
            Connection object which handles your communication with the Stream Deck app
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeyAndEncoderBase.#ctor(BarRaider.SdTools.Backend.ISdConnection,BarRaider.SdTools.Payloads.InitialPayload)">
            <summary>
            Constructor for PluginBase. Receives the communication and plugin settings 
            Note that the settings object is not used by the base and should be consumed by the deriving class.
            Usually, a private class inside the deriving class is created which stores the settings
            Example for settings usage:
            * if (payload.Settings == null || payload.Settings.Count == 0)
            * {
            *         // CreateAction default settings
            * }
            * else
            * {
                this.settings = payload.Settings.ToObject();
            * }
            
            </summary>
            <param name="connection">Communication module with Stream Deck</param>
            <param name="payload">Plugin settings - NOTE: Not used in base class, should be consumed by deriving class</param>
        </member>
        <member name="T:BarRaider.SdTools.Backend.KeypadBase">
            <summary>
            Main abstract class your plugin should derive from for keys (not dials)
            For dials use the EncoderBase or KeyAndEncoderBase
            Holds implementation for all the basic functions
            If you're missing an event, you can register to it from the Connection.StreamDeckConnection object
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.KeyPressed(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.KeyReleased(BarRaider.SdTools.Payloads.KeyPayload)">
            <summary>
            Called when a Stream Deck key is released
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.ReceivedSettings(BarRaider.SdTools.Payloads.ReceivedSettingsPayload)">
            <summary>
            Called when the PropertyInspector has new settings
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.ReceivedGlobalSettings(BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload)">
            <summary>
            Called when GetGlobalSettings is called.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.OnTick">
            <summary>
            Called every second
            Logic for displaying title/image can go here
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.Dispose">
            <summary>
            Abstract method Called when the plugin is disposed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.Destroy">
            <summary>
            Main iDisposable Dispose function
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.KeypadBase.Connection">
            <summary>
            Connection object which handles your communication with the Stream Deck app
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.KeypadBase.#ctor(BarRaider.SdTools.Backend.ISdConnection,BarRaider.SdTools.Payloads.InitialPayload)">
            <summary>
            Constructor for PluginBase. Receives the communication and plugin settings 
            Note that the settings object is not used by the base and should be consumed by the deriving class.
            Usually, a private class inside the deriving class is created which stores the settings
            Example for settings usage:
            * if (payload.Settings == null || payload.Settings.Count == 0)
            * {
            *         // CreateAction default settings
            * }
            * else
            * {
                this.settings = payload.Settings.ToObject();
            * }
            
            </summary>
            <param name="connection">Communication module with Stream Deck</param>
            <param name="payload">Plugin settings - NOTE: Not used in base class, should be consumed by deriving class</param>
        </member>
        <!-- Badly formed XML comment ignored for member "F:BarRaider.SdTools.Backend.PluginContainer.Instances" -->
        <member name="T:BarRaider.SdTools.Backend.SdConnection">
            <summary>
            Connection object which handles your communication with the Stream Deck app
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Backend.SdConnection.pluginUuid">
            <summary>
            An opaque value identifying the plugin. Received as an argument when the executable was launched.
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Backend.SdConnection.deviceInfo">
            <summary>
            Holds information about the devices connected to the computer
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnSendToPlugin">
            <summary>
            Event received by the plugin when the Property Inspector uses the sendToPlugin event.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnTitleParametersDidChange">
            <summary>
            Event received when the user changes the title or title parameters.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnApplicationDidTerminate">
            <summary>
            Event received when a monitored application is terminated
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnApplicationDidLaunch">
            <summary>
            Event received when a monitored application is launched
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnDeviceDidDisconnect">
            <summary>
            Event received when a device is unplugged from the computer
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnDeviceDidConnect">
            <summary>
            Event received when a device is plugged to the computer.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnPropertyInspectorDidAppear">
            <summary>
            Event received when the Property Inspector appears in the Stream Deck software user interface, for example when selecting a new instance.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnPropertyInspectorDidDisappear">
            <summary>
            Event received when the Property Inspector for an instance is removed from the Stream Deck software user interface, for example when selecting a different instance.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Backend.SdConnection.OnSystemDidWakeUp">
            <summary>
            Event received when the computer wakes up
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.SdConnection.ContextId">
            <summary>
            An opaque value identifying the plugin. This value is received during the Registration procedure
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.SdConnection.DeviceId">
            <summary>
            An opaque value identifying the device the plugin is launched on.
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Backend.SdConnection.StreamDeckConnection">
            <summary>
            StreamDeckConnection object, initialized based on the args received when launching the program
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.#ctor(BarRaider.SdTools.Communication.StreamDeckConnection,System.String,BarRaider.SdTools.StreamDeckInfo.RegistrationInfo,System.String,System.String,System.String)">
            <summary>
            Public constructor, a StreamDeckConnection object is required along with the current action and context IDs
            These will be used to correctly communicate with the StreamDeck App
            </summary>
            <param name="connection"></param>
            <param name="pluginUuid"></param>
            <param name="deviceInfo"></param>
            <param name="actionId"></param>
            <param name="contextId"></param>
            /// <param name="deviceId"></param>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.Dispose">
            <summary>
            Dispose (Destructor) function
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.DeviceInfo">
            <summary>
            Gets the Stream Deck device's info
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SendToPropertyInspectorAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send settings to the PropertyInspector
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetSettingsAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Persists your plugin settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetGlobalSettingsAsync(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Persists your global plugin settings
            </summary>
            <param name="settings">Settings to save globally</param>
            <param name="triggerDidReceiveGlobalSettings">Boolean whether to also trigger a didReceiveGlobalSettings event. Default is true</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.GetGlobalSettingsAsync">
            <summary>
            Persists your global plugin settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetImageAsync(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets an image on the StreamDeck key.
            </summary>
            <param name="base64Image">Base64 encoded image</param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <param name="forceSendToStreamdeck">Should image be sent even if it is identical to the one sent previously. Default is false</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetImageAsync(SkiaSharp.SKData,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets an image on the StreamDeck key
            </summary>
            <param name="data">An SKData object representing the encoded image</param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <param name="forceSendToStreamdeck">Should image be sent even if it is identical to the one sent previously. Default is false</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetDefaultImageAsync">
            <summary>
            Sets the default image for this state, as configured in the manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetTitleAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Sets a title on the StreamDeck key
            </summary>
            <param name="title"></param>
            <param name="state">A 0-based integer value representing the state of an action with multiple states. This is an optional parameter. If not specified, the title is set to all states.</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SwitchProfileAsync(System.String)">
            <summary>
            Switches to one of the plugin's built-in profiles
            </summary>
            <param name="profileName"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SwitchProfileAsync(System.String,System.String)">
            <summary>
            Switches to one of the plugin's built-in profiles. Allows to choose which device to switch it on.
            </summary>
            <param name="profileName"></param>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.ShowAlert">
            <summary>
            Shows the Alert (Yellow Triangle) on the StreamDeck key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.ShowOk">
            <summary>
            Shows the Success (Green checkmark) on the StreamDeck key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.LogSdMessage(System.String)">
            <summary>
            Add a message to the Stream Deck log. This is the log located at: %appdata%\Elgato\StreamDeck\logs\StreamDeck0.log
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.GetSettingsAsync">
            <summary>
            Tells Stream Deck to return the current plugin settings via the ReceivedSettings function
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.OpenUrlAsync(System.String)">
            <summary>
            Opens a URI in the user's browser
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.OpenUrlAsync(System.Uri)">
            <summary>
            Opens a URI in the user's browser
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetStateAsync(System.Nullable{System.UInt32})">
            <summary>
            Sets the plugin to a specific state which is pre-configured in the manifest file
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetFeedbackAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the values of touchpad layouts items
            </summary>
            <param name="dictKeyValues"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetFeedbackAsync(System.String,System.String)">
            <summary>
            Sets the value of a single touchpad layout item
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetFeedbackAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Sets the value of a single touchpad layout item
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdConnection.SetFeedbackLayoutAsync(System.String)">
            <summary>
            Changes the current Stream Deck+ touch display layout
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Backend.SdWrapper">
            <summary>
            * Configuration Instructions: TODO
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Backend.SdWrapper.Run(System.String[],BarRaider.SdTools.Backend.IPluginActionRegistry,BarRaider.SdTools.Utilities.IUpdateHandler)">
            /************************************************************************
            Based on Barraider's C# StreamDeck tools, which in turn was based on:
              * Initial configuration from TyrenDe's streamdeck-client-csharp example:
                - https://github.com/TyrenDe/streamdeck-client-csharp
              *  and SaviorXTanren's MixItUp.StreamDeckPlugin:
                - https://github.com/SaviorXTanren/mixer-mixitup/
            *************************************************************************/
            <summary>
            Library's main initialization point. 
            Pass the args from your Main function and a list of supported PluginActionIds, the framework will handle the rest.
            </summary>
            <param name="args"></param>
            <param name="registry"></param>
            /// <param name="updateHandler"></param>
        </member>
        <member name="T:BarRaider.SdTools.Communication.Messages.EmptyPayload">
            <summary>
            Empty payload in event
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.ApplicationDidLaunchEvent">
            <summary>
            Payload for ApplicationDidLaunch event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.ApplicationDidLaunchEvent.Payload">
            <summary>
            Application information
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.ApplicationDidTerminateEvent">
            <summary>
            Payload for ApplicationDidTerminate Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.ApplicationDidTerminateEvent.Payload">
            <summary>
            Application payload
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.EventTypes">
            <summary>
            List of all supported event typs
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.BaseEvent">
            <summary>
            Base event that all the actual events derive from
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.BaseEvent.Event">
            <summary>
            Name of the event raised
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DeviceDidConnectEvent">
            <summary>
            Payload for DeviceDidConnect Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DeviceDidConnectEvent.Device">
            <summary>
            UUID of device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DeviceDidConnectEvent.DeviceInfo">
            <summary>
            Information on the device connected
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DeviceDidDisconnectEvent">
            <summary>
            Payload for DeviceDidDisconnect Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DeviceDidDisconnectEvent.Device">
            <summary>
            UUID of device that was disconnected
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DialDownEvent">
            <summary>
            Payload for Dial down event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialDownEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialDownEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialDownEvent.Device">
            <summary>
            Device UUID key was pressed on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialDownEvent.Payload">
            <summary>
            Information on dial status
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DialRotateEvent">
            <summary>
            Payload for dial rotation event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialRotateEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialRotateEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialRotateEvent.Device">
            <summary>
            Device UUID key was pressed on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialRotateEvent.Payload">
            <summary>
            Information on dial rotation
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DialUpEvent">
            <summary>
            Payload for Dial up event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialUpEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialUpEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialUpEvent.Device">
            <summary>
            Device UUID key was pressed on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DialUpEvent.Payload">
            <summary>
            Information on dial status
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DidReceiveGlobalSettingsEvent">
            <summary>
            Payload for DidReceiveGlobalSettings Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DidReceiveGlobalSettingsEvent.Payload">
            <summary>
            Global Settings payload
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.DidReceiveSettingsEvent">
            <summary>
            Payload for DidReceiveSettings Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DidReceiveSettingsEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DidReceiveSettingsEvent.Context">
            <summary>
            Context (unique action UUID)
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DidReceiveSettingsEvent.Device">
            <summary>
            Device UUID action is on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.DidReceiveSettingsEvent.Payload">
            <summary>
            Settings for action
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.KeyDownEvent">
            <summary>
            Payload for KeyDown event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyDownEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyDownEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyDownEvent.Device">
            <summary>
            Device UUID key was pressed on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyDownEvent.Payload">
            <summary>
            Information on key
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.KeyUpEvent">
            <summary>
            Payload for KeyUp event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyUpEvent.Action">
            <summary>
            Action name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyUpEvent.Context">
            <summary>
            Unique action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyUpEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.KeyUpEvent.Payload">
            <summary>
            Key settings
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidAppearEvent">
            <summary>
            Payload for PropertyInspectorDidAppearEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidAppearEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidAppearEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidAppearEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidDisappearEvent">
            <summary>
            Payload for PropertyInspectorDidDisappearEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidDisappearEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidDisappearEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.PropertyInspectorDidDisappearEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.SendToPluginEvent">
            <summary>
            Payload for SendToPluginEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.SendToPluginEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.SendToPluginEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.SendToPluginEvent.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.SystemDidWakeUpEvent">
            <summary>
            Payload for SystemDidWakeUp event
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.TitleParametersDidChangeEvent">
            <summary>
            Payload for TitleParametersDidChangeEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TitleParametersDidChangeEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TitleParametersDidChangeEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TitleParametersDidChangeEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TitleParametersDidChangeEvent.Payload">
            <summary>
            Title settings
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.TouchTapEvent">
            <summary>
            Payload for touchpad press
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TouchTapEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TouchTapEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TouchTapEvent.Device">
            <summary>
            Device UUID key was pressed on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.TouchTapEvent.Payload">
            <summary>
            Information on touchpad press
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.WillAppearEvent">
            <summary>
            Payload for WillAppearEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillAppearEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillAppearEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillAppearEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillAppearEvent.Payload">
            <summary>
            Appearance settings
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SDEvents.WillDisappearEvent">
            <summary>
            Payload for WillDisappearEvent event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillDisappearEvent.Action">
            <summary>
            Action Name
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillDisappearEvent.Context">
            <summary>
            Unique Action UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillDisappearEvent.Device">
            <summary>
            Stream Deck device UUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.SDEvents.WillDisappearEvent.Payload">
            <summary>
            settings
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.SdkTarget">
            <summary>
            Target to send Title/Image to
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Communication.SdkTarget.HardwareAndSoftware">
            <summary>
            Send to both App and Device
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Communication.SdkTarget.HardwareOnly">
            <summary>
            Send only to device
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Communication.SdkTarget.SoftwareOnly">
            <summary>
            Send only to app
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Communication.StreamDeckConnection">
            <summary>
            Underlying object that communicates with the stream deck app
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.StreamDeckConnection.Port">
            <summary>
            The port used to connect to the StreamDeck websocket
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Communication.StreamDeckConnection.Uuid">
            <summary>
            This is the unique identifier used to communicate with the register StreamDeck plugin.
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnConnected">
            <summary>
            Raised when plugin is connected to stream deck app
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDisconnected">
            <summary>
            /// Raised when plugin is disconnected from stream deck app
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnKeyDown">
            <summary>
            Raised when key is pushed down
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnKeyUp">
            <summary>
            Raised when key is released
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnWillAppear">
            <summary>
            Raised when the action is shown, main trigger for a PluginAction
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnWillDisappear">
            <summary>
            Raised when the action is no longer shown, main trigger for Dispose of PluginAction
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnTitleParametersDidChange">
            <summary>
            Contains information on the Title and its style
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDeviceDidConnect">
            <summary>
            Raised when a Stream Deck device is connected to the PC
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDeviceDidDisconnect">
            <summary>
            Raised when a Stream Deck device has disconnected from the PC
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnApplicationDidLaunch">
            <summary>
            Raised when a monitored app is launched/active
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnApplicationDidTerminate">
            <summary>
            Raised when a monitored app is terminated
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnSystemDidWakeUp">
            <summary>
            Raised after the PC wakes up from sleep
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDidReceiveSettings">
            <summary>
            Raised when settings for the action are received
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDidReceiveGlobalSettings">
            <summary>
            Raised when global settings for the entire plugin are received
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnPropertyInspectorDidAppear">
            <summary>
            Raised when the user is viewing the settings in the Stream Deck app
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnPropertyInspectorDidDisappear">
            <summary>
            Raised when the user stops viewing the settings in the Stream Deck app
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnSendToPlugin">
            <summary>
            Raised when a payload is sent to the plugin from the PI
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDialRotate">
            <summary>
            Raised when a dial is rotated
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDialDown">
            <summary>
            Raised when a dial is down
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnDialUp">
            <summary>
            Raised when a dial is up
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Communication.StreamDeckConnection.OnTouchpadPress">
            <summary>
            Raised when the touchpad is pressed
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Events.ApplicationDidLaunch">
            <summary>
            Payload for ApplicationDidLaunch event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.ApplicationDidLaunch.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.ApplicationDidLaunch.#ctor(BarRaider.SdTools.Payloads.ApplicationPayload)">
            <summary>
            Constructor
            </summary>
            <param name="payload"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.ApplicationDidTerminate">
            <summary>
            Payload for ApplicationDidTerminate event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.ApplicationDidTerminate.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.ApplicationDidTerminate.#ctor(BarRaider.SdTools.Payloads.ApplicationPayload)">
            <summary>
            Constructor
            </summary>
            <param name="payload"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.DeviceDidConnect">
            <summary>
            Payload for DeviceDidConnect event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.DeviceDidConnect.Device">
            <summary>
            Device GUID
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.DeviceDidConnect.DeviceInfo">
            <summary>
            Device Info
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.DeviceDidConnect.#ctor(BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo)">
            <summary>
            Constructor
            </summary>
            <param name="deviceInfo"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.DeviceDidDisconnect">
            <summary>
            Payload for DeviceDidDisconnect event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.DeviceDidDisconnect.Device">
            <summary>
            Device GUID
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.DeviceDidDisconnect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.PropertyInspectorDidAppear">
            <summary>
            Payload for PropertyInspectorDidAppear event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidAppear.Action">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidAppear.Context">
            <summary>
            ContextId
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidAppear.Device">
            <summary>
            Device Guid
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.PropertyInspectorDidAppear.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
            <param name="context"></param>
            <param name="device"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.PropertyInspectorDidDisappear">
            <summary>
            Payload for PropertyInspectorDidDisappear event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidDisappear.Action">
            <summary>
            Action Id
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidDisappear.Context">
            <summary>
            ContextId
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.PropertyInspectorDidDisappear.Device">
            <summary>
            Device Guid
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.PropertyInspectorDidDisappear.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
            <param name="context"></param>
            <param name="device"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.SendToPlugin">
            <summary>
            Payload for SendToPlugin event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.SendToPlugin.Action">
            <summary>
            ActionId
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.SendToPlugin.Context">
            <summary>
            ContextId
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.SendToPlugin.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.SendToPlugin.#ctor(System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
            <param name="context"></param>
            <param name="payload"></param>
        </member>
        <member name="T:BarRaider.SdTools.Events.SystemDidWakeUp">
            <summary>
            Payload for SystemDidWakeUp event
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.SystemDidWakeUp.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Events.TitleParametersDidChange">
            <summary>
            Payload for TitleParametersDidChange event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.TitleParametersDidChange.Action">
            <summary>
            Action Id
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.TitleParametersDidChange.Context">
            <summary>
            Context Id
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.TitleParametersDidChange.Device">
            <summary>
            Device Guid
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Events.TitleParametersDidChange.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Events.TitleParametersDidChange.#ctor(System.String,System.String,System.String,BarRaider.SdTools.Payloads.TitleParametersPayload)">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
            <param name="context"></param>
            <param name="device"></param>
            <param name="payload"></param>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.AppearancePayload">
            <summary>
            Payload for Appearance settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.AppearancePayload.Settings">
            <summary>
            Additional settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.AppearancePayload.Coordinates">
            <summary>
            Coordinates of key pressed
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.AppearancePayload.State">
            <summary>
            State of key
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.AppearancePayload.IsInMultiAction">
            <summary>
            Is action in MultiAction
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.AppearancePayload.Controller">
            <summary>
            Controller which issued the event
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.ApplicationPayload">
            <summary>
            ApplicationPayload
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.ApplicationPayload.Application">
            <summary>
            Application Name
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.ApplicationPayload.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.DialPayload">
            <summary>
            Payload received when a dial is down or up
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialPayload.Controller">
            <summary>
            Controller which issued the event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialPayload.Settings">
            <summary>
            Current event settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialPayload.Coordinates">
            <summary>
            Coordinates of key on the stream deck
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.DialPayload.#ctor(BarRaider.SdTools.Wrappers.KeyCoordinates,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="coordinates"></param>
            <param name="settings"></param>
            <param name="controller"></param>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.DialPayload.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.DialRotatePayload">
            <summary>
            Payload received when a dial is rotated
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialRotatePayload.Controller">
            <summary>
            Controller which issued the event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialRotatePayload.Settings">
            <summary>
            Current event settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialRotatePayload.Coordinates">
            <summary>
            Coordinates of key on the stream deck
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialRotatePayload.Ticks">
            <summary>
            Number of ticks rotated. Positive is to the right, negative to the left
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.DialRotatePayload.IsDialPressed">
            <summary>
            Boolean whether the dial is currently pressed or not
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.DialRotatePayload.#ctor(BarRaider.SdTools.Wrappers.KeyCoordinates,Newtonsoft.Json.Linq.JObject,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="coordinates"></param>
            <param name="settings"></param>
            <param name="controller"></param>
            <param name="ticks"></param>
            <param name="isDialPressed"></param>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.DialRotatePayload.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.InitialPayload">
            <summary>
            Payload received during the plugin's constructor
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.Settings">
            <summary>
            Plugin instance's settings (set through Property Inspector)
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.Coordinates">
            <summary>
            Plugin's physical location on the Stream Deck device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.State">
            <summary>
            Current plugin state
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.IsInMultiAction">
            <summary>
            Is it in a Multiaction
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.Controller">
            <summary>
            The controller of the current action. Values include "Keypad" and "Encoder".
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.InitialPayload.DeviceInfo">
            <summary>
            Information regarding the Stream Deck hardware device
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.InitialPayload.#ctor(BarRaider.SdTools.Payloads.AppearancePayload,BarRaider.SdTools.StreamDeckInfo.RegistrationInfo)">
            <summary>
            Constructor
            </summary>
            <param name="appearancePayload"></param>
            <param name="deviceInfo"></param>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.KeyPayload">
            <summary>
            Payload received when a key is pressed or released
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.KeyPayload.Settings">
            <summary>
            Current event settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.KeyPayload.Coordinates">
            <summary>
            Coordinates of key on the stream deck
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.KeyPayload.State">
            <summary>
            Current key state
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.KeyPayload.UserDesiredState">
            <summary>
            Desired state
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.KeyPayload.IsInMultiAction">
            <summary>
            Is part of a multiAction
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.KeyPayload.#ctor(BarRaider.SdTools.Wrappers.KeyCoordinates,Newtonsoft.Json.Linq.JObject,System.Nullable{System.UInt32},System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="coordinates"></param>
            <param name="settings"></param>
            <param name="state"></param>
            <param name="userDesiredState"></param>
            <param name="isInMultiAction"></param>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.KeyPayload.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload">
            <summary>
            Payload that holds all the settings in the ReceivedGlobalSettings event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.ReceivedGlobalSettingsPayload.Settings">
            <summary>
            Global settings object
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.ReceivedSettingsPayload">
            <summary>
            Payload that holds all the settings in the ReceivedSettings event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.ReceivedSettingsPayload.Settings">
            <summary>
            Action's settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.ReceivedSettingsPayload.Coordinates">
            <summary>
            Coordinates of the key pressed
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.ReceivedSettingsPayload.IsInMultiAction">
            <summary>
            Is event part of a multiaction
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.StreamDeckOptions">
            <summary>
            Class holding all the information passed to the plugin when the program was launched
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.StreamDeckOptions.Port">
            <summary>
            Port to communicate with the StreamDeck app
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.StreamDeckOptions.PluginUuid">
            <summary>
            UUID of the plugin
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.StreamDeckOptions.RegisterEvent">
            <summary>
            Name of the event we should pass to the StreamDeck app to register
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.StreamDeckOptions.RawInfo">
            <summary>
            Raw information in JSON format which we will parse into the DeviceInfo property
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.StreamDeckOptions.DeviceInfo">
            <summary>
            Information regarding the StreamDeck app and StreamDeck hardware which was parsed from the RawInfo JSON field.
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.TitleParametersPayload">
            <summary>
            Payload for TitleParametersDidChange Event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.Settings">
            <summary>
            Settings JSON Object
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.Coordinates">
            <summary>
            Key Coordinates
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.State">
            <summary>
            Key State
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.TitleParameters">
            <summary>
            Title Parameters
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersPayload.TitleParametersRaw">
            <summary>
            Raw Title Parameters (not as proper object)
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.TitleParametersPayload.#ctor(Newtonsoft.Json.Linq.JObject,BarRaider.SdTools.Wrappers.KeyCoordinates,System.Nullable{System.UInt32},System.String,BarRaider.SdTools.Wrappers.TitleParameters)">
            <summary>
            Constructor
            </summary>
            <param name="settings"></param>
            <param name="coordinates"></param>
            <param name="state"></param>
            <param name="title"></param>
            <param name="titleParameters"></param>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.TitleParametersPayload.#ctor">
            <summary>
            For Serilization
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.TitleParametersRawPayload">
            <summary>
            Raw payload for TitleParametersRawPayload event (without objects)
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.FontFamily">
            <summary>
            Name of font family
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.FontSize">
            <summary>
            Size of font
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.FontStyle">
            <summary>
            Style of font (bold, italic)
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.FontUnderline">
            <summary>
            Is there an underling
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.ShowTitle">
            <summary>
            Should title be shown
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.TitleAlignment">
            <summary>
            Alignment of title (top, middle, bottom)
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TitleParametersRawPayload.TitleColor">
            <summary>
            Color of title
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Payloads.TouchpadPressPayload">
            <summary>
            Payload received when the touchpad (above the dials) is pressed
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TouchpadPressPayload.Controller">
            <summary>
            Controller which issued the event
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TouchpadPressPayload.Settings">
            <summary>
            Current event settings
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TouchpadPressPayload.Coordinates">
            <summary>
            Coordinates of key on the stream deck
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TouchpadPressPayload.IsLongPress">
            <summary>
            Boolean whether it was a long press or not
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Payloads.TouchpadPressPayload.TapPosition">
            <summary>
            Position on touchpad which was pressed
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.TouchpadPressPayload.#ctor(BarRaider.SdTools.Wrappers.KeyCoordinates,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean,System.Int32[])">
            <summary>
            Constructor
            </summary>
            <param name="coordinates"></param>
            <param name="settings"></param>
            <param name="controller"></param>
            <param name="isLongPress"></param>
            <param name="tapPosition"></param>
        </member>
        <member name="M:BarRaider.SdTools.Payloads.TouchpadPressPayload.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.DeviceType">
            <summary>
            Type of StreamDeck hardware device, currently two are supported (classic and mini)
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckClassic">
            <summary>
            StreamDeck classic with 15 keys
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckMini">
            <summary>
            StreamDeck mini with 6 keys
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckXl">
            <summary>
            StreamDeck XL with 32 keys
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckMobile">
            <summary>
            StreamDeck Mobile version
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.CorsairGKeys">
            <summary>
            Corsair G-Keys version
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckPedal">
            <summary>
            Pedal
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.CorsairCueSdk">
            <summary>
            Corsair CUE SDK (?)
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.StreamDeckInfo.DeviceType.StreamDeckPlus">
            <summary>
            Stream Deck+
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo">
            <summary>
            Class which holds information on the StreamDeck app and StreamDeck hardware device that the plugin is communicating with
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo.Application">
            <summary>
            Information on the StreamDeck App which we're communicating with
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo.Devices">
            <summary>
            Information on the StreamDeck hardware device that the plugin is running on
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo.Plugin">
            <summary>
            Information on the Plugin we're currently running
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo.DevicePixelRatio">
            <summary>
            Device pixel ratio
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.RegistrationInfo.ToString">
            <summary>
            Shows class information as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.StreamDeckApplicationInfo">
            <summary>
            Holds general information on the StreamDeck App we're communicating with
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckApplicationInfo.Language">
            <summary>
            Current language of the StreamDeck app
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckApplicationInfo.Platform">
            <summary>
            OS Platform
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckApplicationInfo.Version">
            <summary>
            Current version of the StreamDeck app
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckApplicationInfo.ToString">
            <summary>
            Shows class information as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo">
            <summary>
            Class which holds information on the StreamDeck hardware device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo.Size">
            <summary>
            Details on number of keys of the StreamDeck hardware device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo.Type">
            <summary>
            Type of StreamDeck hardware device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo.Id">
            <summary>
            Id of the StreamDeck hardware device
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo.#ctor(BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize,BarRaider.SdTools.StreamDeckInfo.DeviceType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="size"></param>
            <param name="type"></param>
            <param name="deviceId"></param>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceInfo.ToString">
            <summary>
            Shows class information as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize">
            <summary>
            Layout of the keys on the StreamDeck hardware device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize.Rows">
            <summary>
            Number of key rows on the StreamDeck hardware device
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize.Cols">
            <summary>
            Number of key columns on the StreamDeck hardware device
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckDeviceSize.ToString">
            <summary>
            Shows class information as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.StreamDeckInfo.StreamDeckPluginInfo">
            <summary>
            Holds general information on the StreamDeck App we're communicating with
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.StreamDeckInfo.StreamDeckPluginInfo.Version">
            <summary>
            Current version of the plugin
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.StreamDeckInfo.StreamDeckPluginInfo.ToString">
            <summary>
            Shows class information as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.ExtensionMethods">
            <summary>
            Extension methods for various objects
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.IsCoordinatesSame(BarRaider.SdTools.Wrappers.KeyCoordinates,BarRaider.SdTools.Wrappers.KeyCoordinates)">
            <summary>
            Checks if two KeyCoordinates match to the same key
            </summary>
            <param name="coordinates"></param>
            <param name="secondCoordinates"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.ToHex(SkiaSharp.SKColor)">
            <summary>
            Shows Color In Hex Format
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.ToHex(SkiaSharp.SKPaint)">
            <summary>
            Shows Color in Hex format
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.ToByteArray(SkiaSharp.SKImage)">
            <summary>
            Converts an Image into a Byte Array
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.ToBase64(SkiaSharp.SKImage,System.Boolean)">
            <summary>
            Convert an in-memory SKImage to Base64 format. Set the addHeaderPrefix to true, if this is sent to the SendImageAsync function
            </summary>
            <param name="image"></param>
            <param name="addHeaderPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.ToBase64(SkiaSharp.SKBitmap,System.Boolean)">
            <summary>
            Convert an in-memory SKImage to Base64 format. Set the addHeaderPrefix to true, if this is sent to the SendImageAsync function
            </summary>
            <param name="image"></param>
            <param name="addHeaderPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.DrawAndMeasureString(SkiaSharp.SKCanvas,SkiaSharp.SKPaint,System.String,SkiaSharp.SKPoint,System.Boolean)">
            <summary>
            Draws a string on a Canvas object and returns the ending Y position of the string
            </summary>
            <param name="canvas"></param>
            <param name="brush"></param>
            <param name="text"></param>
            <param name="position"></param>
            <param name="horizontal"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.DrawAndMeasureStringWidth(SkiaSharp.SKCanvas,SkiaSharp.SKPaint,System.String,SkiaSharp.SKPoint)">
            <summary>
            Draws a string on a Graphics object and returns the ending Y position of the string
            </summary>
            <param name="canvas"></param>
            <param name="brush"></param>
            <param name="text"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.DrawAndMeasureStringHeight(SkiaSharp.SKCanvas,SkiaSharp.SKPaint,System.String,SkiaSharp.SKPoint)">
            <summary>
            Draws a string on a Graphics object and returns the ending Y position of the string
            </summary>
            <param name="canvas"></param>
            <param name="brush"></param>
            <param name="text"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.GetTextCenter(SkiaSharp.SKCanvas,SkiaSharp.SKPaint,System.String,System.Int32,System.Boolean@,System.Int32)">
            <summary>
            Returns the center X position of a string, given the image's max Width and Font information
            </summary>
            <param name="canvas"></param>
            <param name="brush"></param>
            <param name="text"></param>
            <param name="imageWidth"></param>
            <param name="textFitsImage">True/False - Does text fit image? False if text overflows</param>
            <param name="minIndentation"></param>
            
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.GetTextCenter(SkiaSharp.SKCanvas,SkiaSharp.SKPaint,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the center X position of a string, given the image's max Width and Font information
            </summary>
            <param name="canvas"></param>
            <param name="brush"></param>
            <param name="text"></param>
            <param name="imageWidth"></param>
            <param name="minIndentation"></param>
            
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.GetFontSizeWhereTextFitsImage(SkiaSharp.SKCanvas,System.String,System.Int32,SkiaSharp.SKFont,System.Int32)">
            <summary>
            Returns the highest size of the given font in which the text fits the image
            </summary>
            <param name="canvas"></param>
            <param name="text"></param>
            <param name="imageWidth"></param>
            <param name="font"></param>
            <param name="minimumFontSize"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.AddTextPath(SkiaSharp.SKCanvas,BarRaider.SdTools.Wrappers.TitleParameters,SkiaSharp.SKBitmap,System.String)">
            <summary>
            Adds a text path to an existing Graphics object. Uses TitleParameters to emulate the Text settings in the Property Inspector
            </summary>
            <param name="canvas"></param>
            <param name="titleParameters"></param>
            <param name="image"></param>
            <param name="text"></param>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            /// Truncates a string to the first maxSize characters. If maxSize is less than string length, original string will be returned
            </summary>
            <param name="str">String</param>
            <param name="maxSize">Max size for string</param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.ExtensionMethods.SplitToFitKey(System.String,BarRaider.SdTools.Wrappers.TitleParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds line breaks (\n) to the text to make sure it fits the key when using SetTitleAsync()
            </summary>
            <param name="str"></param>
            <param name="titleParameters"></param>
            <param name="leftPaddingPixels"></param>
            <param name="rightPaddingPixels"></param>
            <param name="imageWidthPixels"></param>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.GlobalSettingsManager">
            <summary>
            Helper class which allows fetching the GlobalSettings of a plugin
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.GlobalSettingsManager.Instance">
            <summary>
            Returns singleton entry of GlobalSettingsManager
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Utilities.GlobalSettingsManager.OnReceivedGlobalSettings">
            <summary>
            Event triggered when Global Settings are received
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GlobalSettingsManager.RequestGlobalSettings">
            <summary>
            Command to request the Global Settings. Use the OnDidReceiveGlobalSSettings callback function to receive the Global Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GlobalSettingsManager.SetGlobalSettings(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Sets the Global Settings for the plugin
            </summary>
            <param name="settings"></param>
            <param name="triggerDidReceiveGlobalSettings"></param>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.GraphicsTools">
            <summary>
            Library of tools used to manipulate graphics
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.ColorFromHex(System.String)">
            <summary>
            Return a Color object based on the hex value
            </summary>
            <param name="hexColor"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.GenerateColorShades(System.String,System.Int32,System.Int32)">
            <summary>
            Generates multiple shades based on an initial color, and number of stages/shades you want
            </summary>
            <param name="initialColor"></param>
            <param name="currentShade"></param>
            <param name="totalAmountOfShades"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.ResizeImage(SkiaSharp.SKBitmap,System.Int32)">
            <summary>
            Resizes an image while scaling
            </summary>
            <param name="original"></param>
            <param name="newWidth"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.CropImage(SkiaSharp.SKBitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract a part of an image (aka crop)
            </summary>
            <param name="original"></param>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.ChangeOpacity(SkiaSharp.SKBitmap,System.Byte)">
            <summary>
            Creates a new image with different opacity
            </summary>
            <param name="original"></param>
            <param name="opacity"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.GraphicsTools.WrapStringToFitImage(System.String,BarRaider.SdTools.Wrappers.TitleParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds line breaks ('\n') to the string every time the text would overflow the image
            </summary>
            <param name="str"></param>
            <param name="titleParameters"></param>
            <param name="leftPaddingPixels"></param>
            <param name="rightPaddingPixels"></param>
            <param name="imageWidthPixels"></param>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.IUpdateHandler">
            <summary>
            Interface for a plugin update handler
            </summary>
        </member>
        <member name="E:BarRaider.SdTools.Utilities.IUpdateHandler.OnUpdateStatusChanged">
            <summary>
            Event received by the infrastructure after an upgrade check
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.IUpdateHandler.IsBlockingUpdate">
            <summary>
            Is the current update a blocking one
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.IUpdateHandler.SetPluginConfiguration(System.String,System.String)">
            <summary>
            Sets the information about the plugin
            </summary>
            <param name="pluginName"></param>
            <param name="pluginVersion"></param>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.IUpdateHandler.SetGlobalSettings(System.Object)">
            <summary>
            Sets the plugin global settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.IUpdateHandler.CheckForUpdate">
            <summary>
            Checks for update
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.TracingLevel">
            <summary>
            Tracing levels used for Logger
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.Logger">
            <summary>
            Log4Net logger helper class
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.Logger.Instance">
            <summary>
            Returns singleton entry of Log4Net logger
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Logger.LogMessage(BarRaider.SdTools.Utilities.TracingLevel,System.String)">
            <summary>
            Add message to log with a specific severity level. 
            </summary>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.PluginUpdateStatus">
            <summary>
            Status of update request
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Utilities.PluginUpdateStatus.Unknown">
            <summary>
            Unknown reply
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Utilities.PluginUpdateStatus.UpToDate">
            <summary>
            Plugin is up to date
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Utilities.PluginUpdateStatus.MinorUpgrade">
            <summary>
            Minor version update available
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Utilities.PluginUpdateStatus.MajorUpgrade">
            <summary>
            Major version update available
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Utilities.PluginUpdateStatus.CriticalUpgrade">
            <summary>
            Critical update needed
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.PluginUpdateInfo">
            <summary>
            Response to an update request
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.PluginUpdateInfo.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.PluginUpdateInfo.UpdateUrl">
            <summary>
            Update URL
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Utilities.PluginUpdateInfo.UpdateImage">
            <summary>
            Update URL
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.PluginUpdateInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.PluginUpdateInfo.#ctor(BarRaider.SdTools.Utilities.PluginUpdateStatus,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="status"></param>
            <param name="updateUrl"></param>
            /// <param name="updateImage"></param>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.RandomGenerator">
            <summary>
            Helper class for generating random numbers
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.RandomGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.RandomGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range. Value will be less than the specified maximum.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Utilities.Tools">
            <summary>
            Set of common utilities used by various plugins
            Currently the class mostly focuses on image-related functions that will be passed to the StreamDeck key
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.FileToBase64(System.String,System.Boolean)">
            <summary>
            Convert an image file to Base64 format. Set the addHeaderPrefix to true, if this is sent to the SendImageAsync function
            </summary>
            <param name="fileName"></param>
            <param name="addHeaderPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.ImageToBase64(SkiaSharp.SKImage,System.Boolean)">
            <summary>
            Convert an in-memory image object to Base64 format. Set the addHeaderPrefix to true, if this is sent to the SendImageAsync function
            </summary>
            <param name="image"></param>
            <param name="addHeaderPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.ImageToBase64(SkiaSharp.SKBitmap,System.Boolean)">
            <summary>
            Convert an in-memory image object to Base64 format. Set the addHeaderPrefix to true, if this is sent to the SendImageAsync function
            </summary>
            <param name="image"></param>
            <param name="addHeaderPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.Base64StringToImage(System.String)">
            <summary>
            Convert a base64 image string to an Image object
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GetKeyDefaultHeight(BarRaider.SdTools.StreamDeckInfo.DeviceType)">
            <summary>
            Gets the key default height in pixels.
            To get the StreamDeckType use Connection.DeviceInfo()
            </summary>
            <param name="streamDeckType"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GetKeyDefaultWidth(BarRaider.SdTools.StreamDeckInfo.DeviceType)">
            <summary>
            Gets the key default width in pixels.
            To get the StreamDeckType use Connection.DeviceInfo()
            </summary>
            <param name="streamDeckType"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GenerateKeyImage(BarRaider.SdTools.StreamDeckInfo.DeviceType)">
            <summary>
            Generates an empty key bitmap with the default height and width.
            New: To get the StreamDeckType use Connection.DeviceInfo()
            </summary>
            <param name="streamDeckType"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GenerateGenericKeyImage">
            <summary>
            Creates a key image that fits all Stream Decks
            </summary>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GenerateKeyImage(BarRaider.SdTools.Wrappers.TitleParameters,System.String,SkiaSharp.SKColor,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <summary>
            Creates a key image that fits all Stream Decks, with the specified color and font properties.
            </summary>
            <param name="titleParameters"></param>
            <param name="text"></param>
            <param name="backgroundColor"></param>
            <param name="imageFormat"></param>
            <param name="quality"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.GenerateKeyImage(System.Int32,System.Int32,System.String,BarRaider.SdTools.Wrappers.TitleParameters,SkiaSharp.SKColor,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <summary>
            Creates a key image based on given height, width, color and font properties.
            </summary>
            <param name="height"></param>
            <param name="width"></param>
            <param name="text"></param>
            <param name="titleParameters"></param>
            <param name="backgroundColor"></param>
            <param name="imageFormat"></param>
            <param name="quality"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.FilenameFromPayload(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Extracts the actual filename from a file payload received from the Property Inspector
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.FormatNumber(System.Int64)">
            <summary>
            Converts a long to a human-readable string. Example: 54,265 => 54.27k
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.FormatBytes(System.Double)">
            <param name="numberInBytes">Size in bytes</param>
            <returns>Formatted human-readable string (ex. "2 MB")</returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.ImageToSha512(SkiaSharp.SKData)">
            <summary>
            Returns SHA512 Hash from an image object
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.StringToSha512(System.String)">
            <summary>
            Returns SHA512 Hash from a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.BytesToSha512(System.Byte[])">
            <summary>
            Returns SHA512 Hash from a byte stream
            </summary>
            <param name="byteStream"></param>
            <returns></returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.AutoPopulateSettings``1(``0,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Iterates through the fromJObject, finds the property that matches in the toSettings object, and sets the value from the fromJObject object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toSettings"></param>
            <param name="fromJObject"></param>
            <returns>Number of properties updated</returns>
        </member>
        <member name="M:BarRaider.SdTools.Utilities.Tools.RangeToPercentage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes a custom range and recalculates the value on a scale from 0 to 100
            </summary>
            <param name="value"></param>
            <param name="originalMin"></param>
            <param name="originalMax"></param>
            <returns></returns>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.KeyCoordinates">
            <summary>
            Coordinates of the current key
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.KeyCoordinates.Column">
            <summary>
            Column of the current key
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.KeyCoordinates.Row">
            <summary>
            Row of the current key
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.PluginActionId">
            <summary>
            This class associates a plugin UUID (which is indicated in the Manifest file), with the type of the implementation class.
            The implementation class must be derived from the PluginBase class for this to work properly.
            If the type passed does not derive from PluginBase, a NotSupportedException will be thrown
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.PluginActionId.ActionId">
            <summary>
            Action UUID as indicated in the manifest file
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.PluginActionId.PluginBaseType">
            <summary>
            Type of class that implemented this action. Must inherit KeyAndEncoderBase, KeypadBase or EncoderBase
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Wrappers.PluginActionId.#ctor(System.String,System.Type)">
            <summary>
            PluginActionId constructor
            </summary>
            <param name="actionId">actionId is the UUID from the manifest file</param>
            <param name="pluginBaseType">Type of class that implemented this action. Must inherit PluginBase</param>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.SdEventReceivedEventArgs`1">
            <summary>
            Base (Generic) EventArgs used for events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.SdEventReceivedEventArgs`1.Event">
            <summary>
            Event Information
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.TitleVerticalAlignment">
            <summary>
            Enum for the alignment of the Title text on the key
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleVerticalAlignment.Top">
            <summary>
            Top Alignment
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleVerticalAlignment.Middle">
            <summary>
            Middle/Center Alignment
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleVerticalAlignment.Bottom">
            <summary>
            Bottom Alignment
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.TitleHorizontalAlignment">
            <summary>
            Enum for the alignment of the Title text on the key
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleHorizontalAlignment.Left">
            <summary>
            Top Alignment
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleHorizontalAlignment.Middle">
            <summary>
            Middle/Center Alignment
            </summary>
        </member>
        <member name="F:BarRaider.SdTools.Wrappers.TitleHorizontalAlignment.Right">
            <summary>
            Bottom Alignment
            </summary>
        </member>
        <member name="T:BarRaider.SdTools.Wrappers.TitleParameters">
            <summary>
            Class holding all the Title Information set by a user in the Property Inspector
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.TitleColor">
            <summary>
            Title color
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.TitleStrokeColor">
            <summary>
            Title stroke color
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.TitleStrokeThickness">
            <summary>
            Title stroke thickness
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.FontSizeInPoints">
            <summary>
            Font Size in Points
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.FontSizeInPixels">
            <summary>
            Font size in Pixels
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.FontSizeInPixelsScaledToDefaultImage">
            <summary>
            Font size Scaled to Image
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.FontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.FontStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.ShowTitle">
            <summary>
            Should title be shown
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.VerticalAlignment">
            <summary>
            Vertical alignment of the title text on the key
            </summary>
        </member>
        <member name="P:BarRaider.SdTools.Wrappers.TitleParameters.HorizontalAlignment">
            <summary>
            Horizontal alignment of the title text on the key
            </summary>
        </member>
        <member name="M:BarRaider.SdTools.Wrappers.TitleParameters.#ctor(SkiaSharp.SKTypeface,SkiaSharp.SKFontStyle,System.Double,SkiaSharp.SKColor,System.Boolean,BarRaider.SdTools.Wrappers.TitleVerticalAlignment,BarRaider.SdTools.Wrappers.TitleHorizontalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="fontFamily"></param>
            <param name="fontStyle"></param>
            <param name="fontSize"></param>
            <param name="titleColor"></param>
            <param name="showTitle"></param>
            <param name="verticalAlignment"></param>
            <param name="horizontalAlignment"></param>
        </member>
        <member name="M:BarRaider.SdTools.Wrappers.TitleParameters.#ctor(System.String,System.UInt32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fontFamily"></param>
            <param name="fontSize"></param>
            <param name="fontStyle"></param>
            <param name="showTitle"></param>
            <param name="titleAlignment"></param>
            <param name="titleColor"></param>
        </member>
        <member name="M:BarRaider.SdTools.Wrappers.TitleParameters.#ctor">
            <summary>
            Default constructor, for object initializer
            </summary>
        </member>
    </members>
</doc>
